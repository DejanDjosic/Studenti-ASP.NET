#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PrijavaIspita.LinqToSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PrijavaIspita")]
	public partial class PrijavaIspitaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSmer(Smer instance);
    partial void UpdateSmer(Smer instance);
    partial void DeleteSmer(Smer instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    #endregion
		
		public PrijavaIspitaDataContext() : 
				base(global::PrijavaIspita.LinqToSQL.Properties.Settings.Default.PrijavaIspitaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PrijavaIspitaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrijavaIspitaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrijavaIspitaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrijavaIspitaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Smer> Smers
		{
			get
			{
				return this.GetTable<Smer>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Smer")]
	public partial class Smer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idSmer;
		
		private string _naziv;
		
		private EntitySet<Student> _Students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSmerChanging(int value);
    partial void OnidSmerChanged();
    partial void OnnazivChanging(string value);
    partial void OnnazivChanged();
    #endregion
		
		public Smer()
		{
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSmer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idSmer
		{
			get
			{
				return this._idSmer;
			}
			set
			{
				if ((this._idSmer != value))
				{
					this.OnidSmerChanging(value);
					this.SendPropertyChanging();
					this._idSmer = value;
					this.SendPropertyChanged("idSmer");
					this.OnidSmerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_naziv", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string naziv
		{
			get
			{
				return this._naziv;
			}
			set
			{
				if ((this._naziv != value))
				{
					this.OnnazivChanging(value);
					this.SendPropertyChanging();
					this._naziv = value;
					this.SendPropertyChanged("naziv");
					this.OnnazivChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Smer_Student", Storage="_Students", ThisKey="idSmer", OtherKey="idSmer")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Smer = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Smer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idStudent;
		
		private string _ime;
		
		private string _prezime;
		
		private int _godinaUpisa;
		
		private int _idSmer;
		
		private EntityRef<Smer> _Smer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStudentChanging(int value);
    partial void OnidStudentChanged();
    partial void OnimeChanging(string value);
    partial void OnimeChanged();
    partial void OnprezimeChanging(string value);
    partial void OnprezimeChanged();
    partial void OngodinaUpisaChanging(int value);
    partial void OngodinaUpisaChanged();
    partial void OnidSmerChanging(int value);
    partial void OnidSmerChanged();
    #endregion
		
		public Student()
		{
			this._Smer = default(EntityRef<Smer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStudent", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idStudent
		{
			get
			{
				return this._idStudent;
			}
			set
			{
				if ((this._idStudent != value))
				{
					this.OnidStudentChanging(value);
					this.SendPropertyChanging();
					this._idStudent = value;
					this.SendPropertyChanged("idStudent");
					this.OnidStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ime
		{
			get
			{
				return this._ime;
			}
			set
			{
				if ((this._ime != value))
				{
					this.OnimeChanging(value);
					this.SendPropertyChanging();
					this._ime = value;
					this.SendPropertyChanged("ime");
					this.OnimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_prezime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string prezime
		{
			get
			{
				return this._prezime;
			}
			set
			{
				if ((this._prezime != value))
				{
					this.OnprezimeChanging(value);
					this.SendPropertyChanging();
					this._prezime = value;
					this.SendPropertyChanged("prezime");
					this.OnprezimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_godinaUpisa", DbType="Int NOT NULL")]
		public int godinaUpisa
		{
			get
			{
				return this._godinaUpisa;
			}
			set
			{
				if ((this._godinaUpisa != value))
				{
					this.OngodinaUpisaChanging(value);
					this.SendPropertyChanging();
					this._godinaUpisa = value;
					this.SendPropertyChanged("godinaUpisa");
					this.OngodinaUpisaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSmer", DbType="Int NOT NULL")]
		public int idSmer
		{
			get
			{
				return this._idSmer;
			}
			set
			{
				if ((this._idSmer != value))
				{
					if (this._Smer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSmerChanging(value);
					this.SendPropertyChanging();
					this._idSmer = value;
					this.SendPropertyChanged("idSmer");
					this.OnidSmerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Smer_Student", Storage="_Smer", ThisKey="idSmer", OtherKey="idSmer", IsForeignKey=true)]
		public Smer Smer
		{
			get
			{
				return this._Smer.Entity;
			}
			set
			{
				Smer previousValue = this._Smer.Entity;
				if (((previousValue != value) 
							|| (this._Smer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Smer.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Smer.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._idSmer = value.idSmer;
					}
					else
					{
						this._idSmer = default(int);
					}
					this.SendPropertyChanged("Smer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
